Index: src/main/java/com/leesin/java8/wangwenjun/第4讲_/MethodReference.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.leesin.java8.wangwenjun.第4讲_;\n\nimport com.leesin.java8.wangwenjun.ComplexApple;\nimport com.leesin.java8.wangwenjun.ThreeFunction;\nimport com.leesin.java8.wangwenjun.第1讲_FunctionalInterface.Apple;\n\nimport java.util.Arrays;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.function.BiFunction;\nimport java.util.function.Consumer;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\n\n/**\n * Created by wangwenjun on 2016/10/16.\n */\npublic class MethodReference {\n\n    public static void main(String[] args) {\n\n        /*Consumer<String> consumer = (s) -> System.out.println(s);\n        useConsumer(consumer, \"Hello Alex\");*/\n\n        useConsumer(s -> System.out.println(s), \"Hello Alex\");\n\n        useConsumer(System.out::println, \"Hello Wangwenjun\");\n\n        List<Apple> list = Arrays.asList(new Apple(\"abc\", 123), new Apple(\"Green\", 110), new Apple(\"red\", 123));\n        System.out.println(list);\n        list.sort((a1, a2) -> a1.getColor().compareTo(a2.getColor()));\n        System.out.println(list);\n        list.stream().forEach(a -> System.out.println(a));\n        System.out.println(\"==========================\");\n        list.stream().forEach(System.out::println);\n\n        /**\n         * 方法引用 = lambda，都需要传入参数\n         * Functional = 方法引用 or lambda\n         */\n        /**\n         * 1 类的静态方法推导\n         * Integer.parseInt(a)     类的方法\n         */\n        int value = Integer.parseInt(\"123\");\n        Function<String, Integer> f1 = (a) -> Integer.parseInt(a);\n        Function<String, Integer> f = Integer::parseInt;\n        Integer result = f.apply(\"123\");\n        System.out.println(result);\n\n        /**\n         * 2 实例方法，即普通类方法\n         * a.charAt(1)             实例的类的方法\n         */\n        BiFunction<String, Integer, Character> f5 = (a, b) -> a.charAt(b);\n        BiFunction<String, Integer, Character> f2 = String::charAt;\n        Character c = f2.apply(\"hello\", 2);\n        System.out.println(c);\n\n        String string = new String(\"Hello\");\n        Function<Integer, Character> f3 = string::charAt;\n        Character c2 = f3.apply(4);\n        System.out.println(c2);\n\n\n        Supplier<String> supplier = String::new;\n\n        String s = supplier.get();\n        System.out.println(s);\n\n\n        BiFunction<String, Long, Apple> appleFuntion = Apple::new;\n\n        Apple apple = appleFuntion.apply(\"red\", 100L);\n        System.out.println(apple);\n\n\n        ThreeFunction<String, Long, String, ComplexApple> threeFunction = ComplexApple::new;\n        ComplexApple complexApple = threeFunction.apply(\"Green\", 123L, \"FuShi\");\n        System.out.println(complexApple);\n\n\n        List<Apple> list2 = Arrays.asList(new Apple(\"abc\", 123), new Apple(\"Green\", 110), new Apple(\"red\", 123));\n\n        System.out.println(list2);\n        list2.sort(Comparator.comparing(Apple::getColor));\n        System.out.println(list2);\n    }\n\n    private static <T> void useConsumer(Consumer<T> consumer, T t) {\n        consumer.accept(t);\n        consumer.accept(t);\n    }\n}\n
===================================================================
diff --git a/src/main/java/com/leesin/java8/wangwenjun/第4讲_/MethodReference.java b/src/main/java/com/leesin/java8/wangwenjun/第4讲_/MethodReference.java
--- a/src/main/java/com/leesin/java8/wangwenjun/第4讲_/MethodReference.java	
+++ b/src/main/java/com/leesin/java8/wangwenjun/第4讲_/MethodReference.java	
@@ -26,7 +26,8 @@
 
         useConsumer(System.out::println, "Hello Wangwenjun");
 
-        List<Apple> list = Arrays.asList(new Apple("abc", 123), new Apple("Green", 110), new Apple("red", 123));
+        List<Apple> list = Arrays.asList(new Apple("abc", 123), new Apple("Green", 110),
+                new Apple("red", 123));
         System.out.println(list);
         list.sort((a1, a2) -> a1.getColor().compareTo(a2.getColor()));
         System.out.println(list);
